auth.js:
import NextAuth from "next-auth";
import { FirestoreAdapter } from "@auth/firebase-adapter";
import { cert } from "firebase-admin/app";
import Nodemailer from "next-auth/providers/nodemailer";
import { db } from "@/lib/firebaseConfig";
import { doc, getDoc, setDoc } from "firebase/firestore";

export const { handlers, signIn, signOut, auth } = NextAuth({
  providers: [
    Nodemailer({
      server: {
        host: process.env.EMAIL_SERVER_HOST,
        port: process.env.EMAIL_SERVER_PORT,
        auth: {
          user: process.env.EMAIL_SERVER_USER,
          pass: process.env.EMAIL_SERVER_PASSWORD,
        },
        secure: true,
      },
      from: process.env.EMAIL_FROM,
    }),
  ],
  adapter: FirestoreAdapter({
    credential: cert({
      projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
      clientEmail: process.env.AUTH_FIREBASE_CLIENT_EMAIL,
      privateKey: process.env.AUTH_FIREBASE_PRIVATE_KEY.replace(/\\n/g, "\n"),
    }),
  }),
  pages: {
    signIn: "/login",
  },
  callbacks: {
    session: async ({ session }) => {
      const { email } = session.user;
      const userDocRef = doc(db, "users", email);
      const userDoc = await getDoc(userDocRef);
      if (userDoc.exists()) {
        session.user.role = userDoc.data().role;
      } else {
        session.user.role = "admin";
        await setDoc(userDocRef, { email, role: "admin" });
      }
      return session;
    },
  },
});

package.json:
{
  "name": "final",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@auth/firebase-adapter": "^2.9.1",
    "firebase": "^11.7.3",
    "firebase-admin": "^12.7.0",
    "lucide-react": "^0.511.0",
    "next": "15.3.2",
    "next-auth": "^5.0.0-beta.28",
    "nodemailer": "^6.10.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.1"
  }
}

.env.local:
NEXT_PUBLIC_FIREBASE_PROJECT_ID="sofware-database"
NEXT_PUBLIC_FIREBASE_API_KEY="AIzaSyBVIZfwrq9Gi6PRFpF95ffF04Tc4EmJ5Hk"
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="sofware-database.firebaseapp.com"
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="sofware-database.firebasestorage.app"
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="745186780986"
NEXT_PUBLIC_FIREBASE_APP_ID="1:745186780986:web:e9f70b18d3d0bee4d79203"

AUTH_FIREBASE_CLIENT_EMAIL="firebase-adminsdk-fbsvc@sofware-database.iam.gserviceaccount.com"
AUTH_FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDLA/YzCebzvzlP\nhnWqUyHVlOaV2oSl4eJ4hAeRLzEy0RpX8vEoK5hkTTXg8nSkWRxG2O2W2iCPRiT7\n144Z3WYt886H2xCfref0OoCM1G8RUubrntarhuxyOhtICxjMV8C2BZ5Gq7b1RnZL\nMAWZADvxSjmNzUNACzbWGgiJAV0NQ+uARBJk8PCRdQsJhj+b273JcshU3fBzk/cL\nKaDQfGNXsTELDDxn8FVNGacOOdgtHoeRoZjGnBIh6gxaUhmNqbEwaZmmogwdCzdw\n8dRiYqp6IIwfNKFpEDsudZPED7Q5sUPMqKTTA798GAjvxg2T2Zebz6Luxp6eCMQs\n3upinFwpAgMBAAECggEAAiuQRMhgPv6nILmgOSCDLZCLpzJMF4NAKDCQH0/Xg8fl\nz6cCR6KqADDRYZW5B7rHvboVjqhx6FotCR39CN8Nd8CXS91Y8qGWCz+hkhNhNxFm\n0Mj0mdDiH9Bp5QzbNNNxQz/4NVliNDrgjgos+V122FotVz3WxZnBFpMgwF5J0kKH\n5vmvBXW3/LUH71YPeIbVX+xOJyaTIuloluSg/Y0bSerd383oYBEJUOYGBHCW97X1\nfLYoX0XxNMR1b3aBnNOizCpWlm8Phu8If/bWXsNuCJLsAsCuXMBFrkrCEi3Y/nk8\nInMm2jT2WbG8zh4KpInJaq32DkvHMZP2Wb1ne88YgQKBgQD183YGK1vFBw12/+/f\n01XgjNOvSjARrRmlVL9+t2M159TUXN3VR6EFE8uTUK5GLUYrs+n1blCzxLWjJa4T\noYSqhy2Mq2HsdX+ls+ptYw6CS8yVph3ejiGz8ELm9duTOHwx6kf1RQPQgB8Ur56i\nld3zvKjVNysluYFijQXwseJGgQKBgQDTT2nzOP4W6qZbl/HEu8JXWtBzvK+fc5FL\nWs7ZIGBVwDyAkiTls60ccyPfKgo9zuLEUr1tw/enshlPq5hZDhAfFF+7zNBPZ4On\n6HDpOgVTk/ShCeWBK8BdC1YAxyX4wzSs0dBl5MM8+A1/tdGFXUVapfkQ2Y4rMp7N\n5tku121RqQKBgQCDfhxVhAzWM8URIBhA1B4PpXrvNnyolqElcT/IIYebJEz3FIdN\nJbSCoGiwY+wofMANUWz92HKxCbQKe3Sr7iidexPxJxd9cfxCvQPSY6k4JApG378M\nY3TFXOiHzl4MQaC0lwrNqI43hKgZSSNIzVMSooSpKYuZ6amw5LCOVKwjAQKBgDvi\nfKdGVpQOCflZNVZI08nH3d1+8tKggOO3J3nXOBX1NfBF+pjyc7PlWZwsINzlXdS/\nkhmiePQYgB3ZBoLuflkggAUMBVkLf/8824rtO4c1HhXpZRZXXNvBk60Cw1sdjzcO\n+x11WHNV5RV1ZJyEE1yePtisnyLU5LZ7nr8spDmJAoGAebCs0ZWAAz/6sXwuZ2RB\nWc4DtWsqwXrF3BaWkFI44pTEGk6+yKLf0NkNgFtzZ4wlNB3W/bY6nMV4DnDtQ05h\nRiARBsN3X4A0a3WkoyuI3GhjfZVYJvlmovSKmRmtnEhCiUC4InN3xrGxLHKLNCF2\nQuyOtnnoY+Lgg5TXtiLhxGA=\n-----END PRIVATE KEY-----\n"
AUTH_SECRET="/wdrKYukQKKQCS4l7Uy+KgLmMWUnMbQ2qF9cKr8dTjY=" 

EMAIL_SERVER_USER=eromotoya@gmail.com
EMAIL_SERVER_PASSWORD=tsatktjpobeeufvq
EMAIL_SERVER_HOST=smtp.gmail.com
EMAIL_SERVER_PORT=465
EMAIL_FROM=eromotoya@gmail.com

app/add/page.js:
"use client";
import { useState, useEffect } from "react";
import { db } from "@/lib/firebaseConfig";
import { collection, addDoc, getDocs } from "firebase/firestore";
import FormField from "@/components/FormField";
import Button from "@/components/Button";
import Table from "@/components/Table";

export default function AddPage() {
  const [salespersons, setSalespersons] = useState([]);
  const [formData, setFormData] = useState({ email: "", name: "", phone: "" });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const fetchSalespersons = async () => {
    try {
      const querySnapshot = await getDocs(collection(db, "users"));
      const data = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setSalespersons(data.filter((user) => user.role === "salesperson"));
    } catch (error) {
      console.error("Error fetching salespersons:", error);
    }
  };

  useEffect(() => {
    fetchSalespersons();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    try {
      await addDoc(collection(db, "users"), {
        ...formData,
        role: "salesperson",
      });
      setFormData({ email: "", name: "", phone: "" });
      fetchSalespersons();
    } catch (error) {
      setError("Failed to add salesperson.");
      console.error("Error:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const columns = [
    { key: "name", label: "Name" },
    { key: "email", label: "Email" },
    { key: "phone", label: "Phone" },
  ];

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
        Add Salesperson
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
        <div>
          <h2 className="text-lg font-semibold mb-2 text-gray-900 dark:text-white">
            Add New Salesperson
          </h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <FormField
              label="Email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              required
            />
            <FormField
              label="Name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
            />
            <FormField
              label="Phone"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
            />
            <Button type="submit" disabled={loading}>
              {loading ? "Adding..." : "Add Salesperson"}
            </Button>
            {error && <p className="text-red-500 text-sm">{error}</p>}
          </form>
        </div>

        <div>
          <h2 className="text-lg font-semibold mb-2 text-gray-900 dark:text-white">
            Salespersons List
          </h2>
          {salespersons.length > 0 ? (
            <Table columns={columns} data={salespersons} />
          ) : (
            <p className="text-gray-900 dark:text-white">
              No salespersons added yet.
            </p>
          )}
        </div>
      </div>
    </div>
  );
}


app/add/layout.js:
import Layout from "@/components/Layout";

export default function AddLayout({ children }) {
  return <Layout>{children}</Layout>;
}

app/api/auth/[...nextauth]/route.js:
import { handlers } from "@/auth";
export const { GET, POST } = handlers

app/dashboard/page.js:
"use client";
import { useState, useEffect } from "react";
import { db } from "@/lib/firebaseConfig";
import { collection, getDocs } from "firebase/firestore";

export default function DashboardPage() {
  const [sales, setSales] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const salesSnapshot = await getDocs(collection(db, "sales"));
        const salesData = salesSnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setSales(salesData);

        const productsSnapshot = await getDocs(collection(db, "products"));
        const productsData = productsSnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setProducts(productsData);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  if (loading)
    return (
      <p className="text-gray-900 dark:text-white">Loading dashboard...</p>
    );

  const totalRevenue = sales.reduce(
    (sum, sale) => sum + (sale.totalAmount || 0),
    0
  );
  const lowStock = products.filter((p) => p.quantity < 5);
  const bestSelling = [...sales]
    .sort((a, b) => (b.quantity || 0) - (a.quantity || 0))
    .slice(0, 3);
  const recentSales = sales.slice(0, 5);

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
        Dashboard
      </h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="bg-gray-100 dark:bg-gray-700 p-4 rounded">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Total Revenue
          </h2>
          <p className="text-2xl text-gray-900 dark:text-white">
            ${totalRevenue.toFixed(2)}
          </p>
        </div>
        <div className="bg-gray-100 dark:bg-gray-700 p-4 rounded">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Best-Selling Products
          </h2>
          <ul className="list-disc pl-5 text-gray-900 dark:text-white">
            {bestSelling.map((sale) => (
              <li key={sale.id}>
                {sale.productId || "N/A"} - {sale.quantity || 0} sold
              </li>
            ))}
          </ul>
        </div>
        <div className="bg-gray-100 dark:bg-gray-700 p-4 rounded">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Recent Sales
          </h2>
          <ul className="list-disc pl-5 text-gray-900 dark:text-white">
            {recentSales.map((sale) => (
              <li key={sale.id}>
                {sale.productId || "N/A"} - ${sale.totalAmount || 0}
              </li>
            ))}
          </ul>
        </div>
        <div className="bg-gray-100 dark:bg-gray-700 p-4 rounded">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Low Stock Alerts
          </h2>
          <ul className="list-disc pl-5 text-gray-900 dark:text-white">
            {lowStock.map((p) => (
              <li key={p.id}>
                {p.item || "N/A"} - {p.quantity || 0} left
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}

app/dashboard/layout.js:
import Layout from "@/components/Layout";

export default function DashboardLayout({ children }) {
  return <Layout>{children}</Layout>;
}


app/login/page.js:
"use client";
import Image from "next/image";
import { Smartphone, Moon, Sun } from "lucide-react";
import { useState } from "react";
import { signIn } from "next-auth/react";
import ThemeToggle from "@/components/ThemeToggle";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setMessage("");
    setLoading(true);
    const res = await signIn("nodemailer", {
      email: email,
      redirect: false,
      callbackUrl: "/dashboard",
    });
    setLoading(false);
    if (res?.error) {
      setError("Failed to send login email.");
    } else {
      setMessage("Check your email!");
      setEmail("");
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-white dark:bg-gray-900 shadow-lg">
      <div className="absolute top-4 right-4">
        <ThemeToggle />
      </div>

      <div className="bg-white dark:bg-gray-900 border-2 border-gray-300 dark:border-gray-400 rounded-xl overflow-hidden flex flex-col md:flex-row w-full max-w-6xl shadow-2xl">
        <div className="hidden md:block relative md:w-1/2">
          <Image
            src="/Phones.jpg"
            alt="Shopping illustration"
            fill
            className="object-cover"
          />
        </div>

        <div className="p-8 w-full md:w-1/2">
          <div className="flex flex-col items-center mb-8">
            <Smartphone className="h-12 w-12 text-purple-600" />
            <p className="mt-1 text-gray-600 dark:text-gray-100">
              Welcome to{" "}
              <span className="font-semibold text-gray-900 dark:text-white">
                Floridda Software
              </span>
            </p>
          </div>

          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-6 text-center">
            Login To Dashboard
          </h2>
          <hr className="border-gray-300 mb-6" />

          <form onSubmit={handleSubmit} className="space-y-5">
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-900 dark:text-white"
              >
                Enter Address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                placeholder="Enter Email Address"
                className="mt-1 block w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500 text-gray-950"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loading}
              />
            </div>

            <button
              type="submit"
              className="w-full py-3 bg-purple-600 text-white rounded-lg font-medium hover:bg-purple-700 transition cursor-pointer"
              disabled={loading}
            >
              {loading ? "Sending..." : "Login"}
            </button>

            {error && (
              <div className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">
                {error}
              </div>
            )}

            {message && (
              <div className="bg-green-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">
                {message}
              </div>
            )}
          </form>
        </div>
      </div>
    </div>
  );
}


app/products/page.js:
"use client";
import { useState } from "react";
import { db } from "@/lib/firebaseConfig";
import {
  collection,
  getDocs,
  deleteDoc,
  doc,
  updateDoc,
  addDoc,
} from "firebase/firestore";
import RegisterProduct from "@/components/RegisterProduct";
import Table from "@/components/Table";
import Modal from "@/components/Modal";
import Button from "@/components/Button";

export default function ProductsPage() {
  const [showModal, setShowModal] = useState(false);
  const [productToEdit, setProductToEdit] = useState(null);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasFetched, setHasFetched] = useState(false);
  const [showConfirmDelete, setShowConfirmDelete] = useState(false);
  const [productToDelete, setProductToDelete] = useState(null);
  const [sellQuantity, setSellQuantity] = useState("");
  const [showSellModal, setShowSellModal] = useState(false);
  const [productToSell, setProductToSell] = useState(null);

  const fetchProducts = async () => {
    setLoading(true);
    try {
      const querySnapshot = await getDocs(collection(db, "products"));
      const productsData = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setProducts(productsData);
      setHasFetched(true);
    } catch (error) {
      console.error("Error fetching products:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = (product) => {
    setProductToDelete(product);
    setShowConfirmDelete(true);
  };

  const confirmDelete = async () => {
    if (productToDelete) {
      try {
        await deleteDoc(doc(db, "products", productToDelete.id));
        setProducts(products.filter((p) => p.id !== productToDelete.id));
      } catch (error) {
        console.error("Error deleting product:", error);
      }
      setShowConfirmDelete(false);
      setProductToDelete(null);
    }
  };

  const handleEdit = (product) => {
    setProductToEdit(product);
    setShowModal(true);
  };

  const handleSell = (product) => {
    setProductToSell(product);
    setSellQuantity("");
    setShowSellModal(true);
  };

  const confirmSell = async () => {
    if (!productToSell || !sellQuantity || sellQuantity <= 0) return;
    const quantityToSell = parseInt(sellQuantity);
    if (quantityToSell > productToSell.quantity) {
      alert("Cannot sell more than available quantity!");
      return;
    }

    try {
      const newQuantity = productToSell.quantity - quantityToSell;
      await updateDoc(doc(db, "products", productToSell.id), {
        quantity: newQuantity,
      });
      await addDoc(collection(db, "sales"), {
        productId: productToSell.id,
        quantity: quantityToSell,
        totalAmount: quantityToSell * productToSell.amountPerUnit,
        salespersonId: "current-user-email", // Replace with actual user email from session
        timestamp: new Date().toISOString(),
      });
      setProducts(
        products.map((p) =>
          p.id === productToSell.id ? { ...p, quantity: newQuantity } : p
        )
      );
      setShowSellModal(false);
      setProductToSell(null);
    } catch (error) {
      console.error("Error processing sale:", error);
    }
  };

  const columns = [
    { key: "item", label: "Item" },
    { key: "quantity", label: "Quantity" },
    { key: "amountPerUnit", label: "Amount/Unit" },
    { key: "modelNumber", label: "Model" },
    { key: "serialNumber", label: "Serial" },
    { key: "category", label: "Category" },
    { key: "subCategory", label: "Sub Category" },
  ];

  const actions = [
    { label: "Edit", onClick: handleEdit },
    { label: "Delete", onClick: handleDelete },
    { label: "Sell", onClick: handleSell },
  ];

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between mb-8">
        <Button onClick={fetchProducts} disabled={loading}>
          {loading ? "Loading..." : "View"}
        </Button>
        <Button
          onClick={() => {
            setProductToEdit(null);
            setShowModal(true);
          }}
        >
          Register
        </Button>
      </div>

      {showModal && (
        <RegisterProduct
          productToEdit={productToEdit}
          onClose={() => setShowModal(false)}
          onSaveComplete={fetchProducts}
        />
      )}

      {loading ? (
        <p className="text-gray-900 dark:text-white">Loading products...</p>
      ) : hasFetched ? (
        products.length > 0 ? (
          <Table columns={columns} data={products} actions={actions} />
        ) : (
          <p className="text-gray-900 dark:text-white">No products found.</p>
        )
      ) : (
        <p className="text-gray-900 dark:text-white">
          Click "View" to see products.
        </p>
      )}

      <Modal
        isOpen={showConfirmDelete}
        onClose={() => setShowConfirmDelete(false)}
        title="Confirm Deletion"
      >
        <p className="mb-4 text-gray-700 dark:text-gray-300">
          Are you sure you want to delete this product?
        </p>
        <div className="flex justify-end space-x-2">
          <Button onClick={() => setShowConfirmDelete(false)}>Cancel</Button>
          <Button
            onClick={confirmDelete}
            className="bg-red-600 hover:bg-red-700"
          >
            Delete
          </Button>
        </div>
      </Modal>

      <Modal
        isOpen={showSellModal}
        onClose={() => setShowSellModal(false)}
        title="Sell Product"
      >
        <p className="mb-4 text-gray-700 dark:text-gray-300">
          Enter quantity to sell for {productToSell?.item}:
        </p>
        <input
          type="number"
          value={sellQuantity}
          onChange={(e) => setSellQuantity(e.target.value)}
          className="mb-4 block w-full rounded-md border-gray-300 shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          min="1"
          max={productToSell?.quantity}
        />
        <div className="flex justify-end space-x-2">
          <Button onClick={() => setShowSellModal(false)}>Cancel</Button>
          <Button onClick={confirmSell}>Sell</Button>
        </div>
      </Modal>
    </div>
  );
}


app/products/layout.js:
import Layout from "@/components/Layout";

export default function ProductsLayout({ children }) {
  return <Layout>{children}</Layout>;
}


app/profile/page.js:
"use client";
import { useSession } from "next-auth/react";
import { db } from "@/lib/firebaseConfig";
import { doc, getDoc } from "firebase/firestore";
import { useState, useEffect } from "react";

export default function ProfilePage() {
  const { data: session } = useSession();
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (session?.user?.email) {
      const fetchUserData = async () => {
        try {
          const userDoc = await getDoc(doc(db, "users", session.user.email));
          if (userDoc.exists()) {
            setUserData(userDoc.data());
          } else {
            setUserData({ email: session.user.email, role: session.user.role });
          }
        } catch (error) {
          console.error("Error fetching user data:", error);
        } finally {
          setLoading(false);
        }
      };
      fetchUserData();
    }
  }, [session]);

  if (!session) return <p className="text-gray-900 dark:text-white">Please log in to view your profile.</p>;
  if (loading) return <p className="text-gray-900 dark:text-white">Loading profile...</p>;

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">Profile</h1>
      <div className="bg-gray-100 dark:bg-gray-700 p-4 rounded max-w-md mx-auto">
        <p className="text-gray-900 dark:text-white"><strong>Name:</strong> {userData?.name || "N/A"}</p>
        <p className="text-gray-900 dark:text-white"><strong>Email:</strong> {userData?.email || session.user.email}</p>
        <p className="text-gray-900 dark:text-white"><strong>Role:</strong> {userData?.role || "N/A"}</p>
        {userData?.phone && <p className="text-gray-900 dark:text-white"><strong>Phone:</strong> {userData.phone}</p>}
      </div>
    </div>
  );
}

app/sales/page.js:
"use client";
import { useState, useEffect } from "react";
import { db } from "@/lib/firebaseConfig";
import { collection, getDocs } from "firebase/firestore";
import Table from "@/components/Table";

export default function SalesPage() {
  const [sales, setSales] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchSales = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "sales"));
        const salesData = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setSales(salesData);
      } catch (error) {
        console.error("Error fetching sales:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchSales();
  }, []);

  const columns = [
    { key: "productId", label: "Product ID" },
    { key: "quantity", label: "Quantity Sold" },
    { key: "totalAmount", label: "Total Amount" },
    { key: "salespersonId", label: "Salesperson" },
    { key: "timestamp", label: "Date" },
  ];

  if (loading)
    return <p className="text-gray-900 dark:text-white">Loading sales...</p>;

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
        Sales
      </h1>
      {sales.length > 0 ? (
        <Table
          columns={columns}
          data={sales.map((sale) => ({
            ...sale,
            timestamp: sale.timestamp
              ? new Date(sale.timestamp).toLocaleString()
              : "N/A",
          }))}
        />
      ) : (
        <p className="text-gray-900 dark:text-white">No sales recorded yet.</p>
      )}
    </div>
  );
}

app/sales/layout.js:
import Layout from "@/components/Layout";

export default function SalesLayout({ children }) {
  return <Layout>{children}</Layout>;
}

app/globals.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: white;
  --text: black;
}

.dark {
  --background: #1a1a1a;
  --text: white;
}

body {
  background: var(--background);
  color: var(--text);
  transition: background 0.3s, color 0.3s;
}

app/layout.js:
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/ThemeContext";
import { SessionProvider } from "next-auth/react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Floridda",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <SessionProvider>
          <ThemeProvider>{children}</ThemeProvider>
        </SessionProvider>
      </body>
    </html>
  );
}


app/page.js:
import { redirect } from "next/navigation";

export default function Home() {
  redirect ("/login");
  return null;
}

components/AuthProvider.js:
"use client"
import { SessionProvider } from 'next-auth/react'
import React from 'react'

const AuthProvider = ({children}) => {
  return (
    <main>
        <SessionProvider>{children}</SessionProvider>
    </main>
  )
}

export default AuthProvider;

components/Button.jsx:
import React from "react";

export default function Button({
  onClick,
  children,
  disabled = false,
  className = "",
  type = "button",
}) {
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`px-4 py-2 rounded-lg font-medium transition ${className} ${
        disabled
          ? "bg-gray-400 cursor-not-allowed"
          : "bg-blue-600 hover:bg-blue-700 text-white"
      }`}
    >
      {children}
    </button>
  );
}


components/CollapseButton.jsx:
"use client";
import { Menu } from "lucide-react";

export default function CollapseButton({ isCollapsed, toggleCollapse }) {
  return (
    <button
      onClick={toggleCollapse}
      className={`flex items-center p-2 rounded-lg w-full ${
        isCollapsed ? "justify-center" : "justify-start"
      } text-gray-900 dark:text-white lg:hidden`}
    >
      <Menu className={`w-6 h-6 ${isCollapsed ? "mx-auto" : "mr-3"}`} />
      {!isCollapsed && <span></span>}
    </button>
  );
}

components/ConfirmDeleteModal.jsx:
"use client";
import { useState } from "react";

export default function ConfirmDeleteModal({ isOpen, onClose, onConfirm }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg">
        <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">
          Confirm Deletion
        </h2>
        <p className="mb-4 text-gray-700 dark:text-gray-300">
          Are you sure you want to delete this product?
        </p>
        <div className="flex justify-end space-x-2">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 dark:bg-gray-600 dark:text-white"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );
}

components/Footer.jsx:
"use client"
export default function Footer() {
  return (
    <footer>
      <span className="text-[0.7em]">&copy; 2025 Floridda Software</span>
    </footer>
  );
}

components/FormField.jsx:
import React from "react";

export default function FormField({
  label,
  name,
  type = "text",
  value,
  onChange,
  required = false,
  disabled = false,
}) {
  return (
    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
      {label} {required && "*"}
      <input
        type={type}
        name={name}
        value={value}
        onChange={onChange}
        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        required={required}
        disabled={disabled}
      />
    </label>
  );
}

components/Layout.jsx:
"use client";
import { useState, useEffect } from "react";
import Sidebar from "./Sidebar";
import Navbar from "./Navbar";

export default function Layout({ children }) {
  const [isCollapsed, setIsCollapsed] = useState(true);

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        setIsCollapsed(false);
      } else {
        setIsCollapsed(true);
      }
    };

    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return (
    <div className="flex flex-col min-h-screen bg-white dark:bg-gray-900">
      <Navbar />
      
      <div className="flex flex-1">
        <Sidebar
          isCollapsed={isCollapsed}
          toggleCollapse={() => setIsCollapsed(!isCollapsed)}
        />
        
        <main className={`
          flex-1 
          transition-all duration-300 
          ${isCollapsed ? "ml-10" : "-ml-5"}
          min-h-[calc(100vh-4rem)]
          p-4
        `}>
          {children}
        </main>
      </div>
    </div>
  );
}

components/Modal.jsx:
import React from "react";

export default function Modal({ isOpen, onClose, children, title }) {
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg w-full max-w-2xl">
        {title && (
          <h2 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
            {title}
          </h2>
        )}
        {children}
        <button
          onClick={onClose}
          className="mt-4 px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 dark:bg-gray-600 dark:text-white"
        >
          Close
        </button>
      </div>
    </div>
  );
}


components/Navbar.jsx:
"use client";
import { Search, Bell, User, PhoneCall, LogOut } from "lucide-react";
import { useEffect, useState } from "react";
import Link from "next/link";
import ThemeToggle from "./ThemeToggle";
import SettingsDropdown from "./SettingsDropdown";
import { useTheme } from "./ThemeContext";
import { useSession } from "next-auth/react";
import { db } from "@/lib/firebaseConfig";
import { collection, query, where, getDocs } from "firebase/firestore";

export default function Navbar() {
  const { isDarkMode, toggleTheme } = useTheme();
  const { data: session } = useSession();
  const [notifications, setNotifications] = useState([]);

  useEffect(() => {
    if (session?.user?.email) {
      const fetchNotifications = async () => {
        try {
          const q = query(
            collection(db, "notifications"),
            where("userId", "==", session.user.email),
            where("read", "==", false)
          );
          const querySnapshot = await getDocs(q);
          setNotifications(
            querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))
          );
        } catch (error) {
          console.error("Error fetching notifications:", error);
        }
      };
      fetchNotifications();
    }
  }, [session]);

  const handleLogout = () => {
    window.location.href = "/login";
  };

  return (
    <nav className="flex items-center justify-between h-16 w-screen px-4 sm:px-5 lg:px-6 shadow bg-white dark:bg-gray-900">
      <div className="flex gap-2 sm:gap-3 md:gap-4">
        <div className="flex items-center gap-1 text-2xl font-bold text-blue-400">
          <PhoneCall className="w-4 h-4 lg:w-7 lg:h-7 md:w-6 md:h-6 sm:w-5 sm:h-5" />
          <h6 className="lg:text-3xl md:text-2xl sm:text-xl text-base">
            Floridda
          </h6>
        </div>
      </div>

      <div className="flex">
        <div className="relative w-50 lg:w-100 md:w-90 sm:w-80">
          <Search className="absolute top-1/2 left-1 w-3 h-3 md:w-5 md:h-5 sm:w-3 sm:h-3 transform -translate-y-1/2 text-gray-900 dark:text-white" />
          <input
            type="text"
            placeholder="Search product group"
            className="bg-white dark:bg-gray-900 text-gray-900 dark:text-white w-full lg:h-10 md:h-8 sm:h-7 h-7 pl-5 sm:pl-6 md:pl-7 lg:pl-8 pr-2 sm:pr-4 py-2 rounded-lg focus:outline-none focus:ring text-xs sm:text-sm md:text-base lg:text-lg border-2 border-gray-400 dark:border-gray-50"
          />
        </div>
      </div>

      <div className="hidden items-center gap-8 lg:flex">
        <ThemeToggle />

        <button className="text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 p-2 rounded-full relative">
          <Bell className="w-6 h-6" />
          {notifications.length > 0 && (
            <span className="absolute top-0 right-0 bg-red-500 text-white rounded-full w-4 h-4 text-xs flex items-center justify-center">
              {notifications.length}
            </span>
          )}
        </button>

        <Link
          href="/profile"
          className="border-l-2 border-gray-900 dark:border-white pl-5"
        >
          <User className="w-6 h-6 text-gray-900 dark:text-white" />
        </Link>

        <button
          onClick={handleLogout}
          className="text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 p-2 rounded-full"
        >
          <LogOut className="w-6 h-6" />
        </button>
      </div>

      <div className="lg:hidden">
        <SettingsDropdown />
      </div>
    </nav>
  );
}

components/ProductList.jsx:
"use client";
import { Edit, Trash } from "lucide-react";

export default function ProductList({ products, onEdit, onDelete }) {
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead className="bg-gray-50 dark:bg-gray-800">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Item
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Quantity
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Amount/Unit
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Model
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Serial
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Category
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Sub Category
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700">
          {products.map((product) => (
            <tr key={product.id}>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.item}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.quantity}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.amountPerUnit}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.modelNumber}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.serialNumber}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.category}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.subCategory}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <button
                  onClick={() => onEdit(product)}
                  className="text-blue-600 hover:text-blue-900 mr-4"
                >
                  <Edit className="w-5 h-5" />
                </button>
                <button
                  onClick={() => onDelete(product.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  <Trash className="w-5 h-5" />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

 components/RegisterProduct.jsx:
"use client";
import { useState, useEffect } from "react";
import { db } from "@/lib/firebaseConfig";
import { collection, addDoc, updateDoc, doc } from "firebase/firestore";
import FormField from "@/components/FormField";
import Button from "@/components/Button";
import Modal from "@/components/Modal";
import { useSession } from "next-auth/react";

export default function RegisterProduct({
  productToEdit,
  onClose,
  onSaveComplete,
}) {
  const { data: session } = useSession();
  const [formData, setFormData] = useState({
    item: "",
    quantity: "",
    amountPerUnit: "",
    modelNumber: "",
    serialNumber: "",
    color: "",
    storage: "",
    category: "",
    subCategory: "",
    description: "",
  });
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const isEditing = !!productToEdit;

  useEffect(() => {
    if (productToEdit) {
      setFormData({
        item: productToEdit.item || "",
        quantity: productToEdit.quantity || "",
        amountPerUnit: productToEdit.amountPerUnit || "",
        modelNumber: productToEdit.modelNumber || "",
        serialNumber: productToEdit.serialNumber || "",
        color: productToEdit.color || "",
        storage: productToEdit.storage || "",
        category: productToEdit.category || "",
        subCategory: productToEdit.subCategory || "",
        description: productToEdit.description || "",
      });
    } else {
      setFormData({
        item: "",
        quantity: "",
        amountPerUnit: "",
        modelNumber: "",
        serialNumber: "",
        color: "",
        storage: "",
        category: "",
        subCategory: "",
        description: "",
      });
    }
  }, [productToEdit]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    if (
      !formData.item ||
      !formData.quantity ||
      !formData.amountPerUnit ||
      !formData.modelNumber ||
      !formData.serialNumber ||
      !formData.category ||
      !formData.subCategory
    ) {
      setError("Please fill in all required fields");
      setLoading(false);
      return;
    }

    try {
      if (isEditing) {
        await updateDoc(doc(db, "products", productToEdit.id), formData);
      } else {
        await addDoc(collection(db, "products"), formData);
      }
      if (formData.quantity < 5 && session?.user?.email) {
        await addDoc(collection(db, "notifications"), {
          userId: session.user.email,
          message: `${formData.item} is low on stock (${formData.quantity} left)`,
          read: false,
          timestamp: new Date().toISOString(),
        });
      }
      onSaveComplete();
      onClose();
    } catch (err) {
      console.error("Error saving product:", err);
      setError("Failed to save product");
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  return (
    <Modal
      isOpen={true}
      onClose={onClose}
      title={isEditing ? "Edit Product" : "Register New Product"}
    >
      <form
        onSubmit={handleSubmit}
        className="grid grid-cols-1 md:grid-cols-2 gap-4"
      >
        <div className="space-y-4">
          <FormField
            label="Item Name"
            name="item"
            value={formData.item}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Quantity"
            name="quantity"
            type="number"
            value={formData.quantity}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Amount per Unit"
            name="amountPerUnit"
            type="number"
            value={formData.amountPerUnit}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Model Number"
            name="modelNumber"
            value={formData.modelNumber}
            onChange={handleChange}
            required
            disabled={loading}
          />
        </div>
        <div className="space-y-4">
          <FormField
            label="Serial Number"
            name="serialNumber"
            value={formData.serialNumber}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Category"
            name="category"
            value={formData.category}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Sub Category"
            name="subCategory"
            value={formData.subCategory}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Color"
            name="color"
            value={formData.color}
            onChange={handleChange}
            disabled={loading}
          />
        </div>
        <div className="md:col-span-2 space-y-4">
          <FormField
            label="Storage"
            name="storage"
            value={formData.storage}
            onChange={handleChange}
            disabled={loading}
          />
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Description
            <textarea
              name="description"
              value={formData.description}
              onChange={handleChange}
              rows={3}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              disabled={loading}
            />
          </label>
        </div>
        {error && <p className="md:col-span-2 text-red-500 text-sm">{error}</p>}
        <div className="md:col-span-2 flex justify-between mt-4">
          <Button onClick={onClose} disabled={loading}>
            Cancel
          </Button>
          <Button type="submit" disabled={loading}>
            {loading ? "Saving..." : isEditing ? "Save" : "Register"}
          </Button>
        </div>
      </form>
    </Modal>
  );
}

components/SettingsDropdown.jsx:
'use client';
import { useState, useEffect } from 'react';
import { User, Sun, Moon, Bell, Settings, LogOut } from 'lucide-react';
import { useTheme } from './ThemeContext';
import Link from 'next/link';

export default function SettingsDropdown() {
  const [isOpen, setIsOpen] = useState(false);
  const { isDarkMode, toggleTheme } = useTheme();

  const handleLogout = () => {
    window.location.href = '/login';
  };

  useEffect(() => {
    const closeDropdown = (e) => {
      if (!e.target.closest('.dropdown-container')) {
        setIsOpen(false);
      }
    };
    window.addEventListener('click', closeDropdown);
    return () => window.removeEventListener('click', closeDropdown);
  }, []);

  return (
    <div className="relative dropdown-container">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"
      >
        <Settings className="w-5 h-5" />
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-xl py-2 z-50">
          {/* Profile */}
          <Link
            href="/profile"
            className="flex items-center px-4 py-2 text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <User className="w-5 h-5 mr-3" />
            Profile
          </Link>

          <button
            onClick={toggleTheme}
            className="flex items-center px-4 py-2 w-full text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            {isDarkMode ? (
              <Sun className="w-5 h-5 mr-3" />
            ) : (
              <Moon className="w-5 h-5 mr-3" />
            )}
            {isDarkMode ? 'Light' : 'Dark'}
          </button>

          <button className="flex items-center px-4 py-2 text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 w-full">
            <Bell className="w-5 h-5 mr-3" />
            Notifications
          </button>

          <button
            onClick={handleLogout}
            className="flex items-center px-4 py-2 text-red-600 hover:bg-gray-100 dark:hover:bg-gray-700 w-full"
          >
            <LogOut className="w-5 h-5 mr-3" />
            Logout
          </button>
        </div>
      )}
    </div>
  );
}

components/Sidebar.jsx:
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useSession } from "next-auth/react";
import { Home, Box, DollarSign, PlusSquare } from "lucide-react";
import CollapseButton from "./CollapseButton";
import Footer from "./Footer";

export default function Sidebar({ isCollapsed, toggleCollapse }) {
  const { data: session } = useSession();
  const path = usePathname() || "";

  const items =
    session?.user?.role === "admin"
      ? [
          { href: "/dashboard", icon: Home, label: "Dashboard" },
          { href: "/products", icon: Box, label: "Products" },
          { href: "/sales", icon: DollarSign, label: "Sales" },
          { href: "/add", icon: PlusSquare, label: "Add" },
        ]
      : [
          { href: "/dashboard", icon: Home, label: "Dashboard" },
          { href: "/sales", icon: DollarSign, label: "Sales" },
        ];

  return (
    <aside
      className={`
        fixed lg:relative
        ${isCollapsed ? "w-12" : "w-40"}
        h-[calc(100vh-4rem)] py-6 flex flex-col
        bg-white dark:bg-gray-900
        z-40
      `}
    >
      <nav className="flex-1 px-2 overflow-y-auto">
        <ul className="space-y-2">
          <li>
            <CollapseButton
              isCollapsed={isCollapsed}
              toggleCollapse={toggleCollapse}
            />
          </li>
          {items.map(({ href, icon: Icon, label }) => (
            <li key={href}>
              <Link
                href={href}
                className={`flex items-center p-2 rounded-lg ${
                  path === href
                    ? "bg-blue-200 dark:bg-blue-400 text-gray-900 dark:text-white font-semibold"
                    : "text-gray-900 dark:text-white hover:bg-gray-200 dark:hover:bg-gray-700"
                }`}
              >
                <Icon
                  className={`w-6 h-6 ${isCollapsed ? "mx-auto" : "mr-3"}`}
                />
                {!isCollapsed && <span>{label}</span>}
              </Link>
            </li>
          ))}
        </ul>
      </nav>
      {!isCollapsed && (
        <div className="mt-auto px-2 border-t-2 border-gray-900 dark:border-white shrink-0 text-center">
          <Footer />
        </div>
      )}
    </aside>
  );
}

coponents/Table.jsx:
import React from "react";

export default function Table({ columns, data, actions = [] }) {
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead className="bg-gray-50 dark:bg-gray-800">
          <tr>
            {columns.map((col) => (
              <th key={col.key} className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">
                {col.label}
              </th>
            ))}
            {actions.length > 0 && (
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Actions</th>
            )}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700">
          {data.map((row) => (
            <tr key={row.id}>
              {columns.map((col) => (
                <td key={col.key} className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                  {row[col.key]}
                </td>
              ))}
              {actions.length > 0 && (
                <td className="px-6 py-4 whitespace-nowrap">
                  {actions.map((action, idx) => (
                    <button key={idx} onClick={() => action.onClick(row)} className="text-blue-600 hover:text-blue-900 mr-4">
                      {action.label}
                    </button>
                  ))}
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

components/ThemeContext.js:
'use client';
import { createContext, useContext, useState, useEffect } from 'react';

const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [isDarkMode, setIsDarkMode] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('theme') === 'dark';
    }
    return false;
  });

  useEffect(() => {
    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
    document.documentElement.classList.toggle('dark', isDarkMode);
  }, [isDarkMode]);

  const toggleTheme = () => setIsDarkMode(prev => !prev);

  return (
    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);

components/ThemeToggle.jsx:
"use client";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "./ThemeContext";
import { useState, useEffect } from "react";

export default function ThemeToggle() {
  const { isDarkMode, toggleTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return <button className="p-2 rounded-full opacity-0" aria-hidden="true" />;
  }

  return (
    <button
      onClick={toggleTheme}
      aria-label="Toggle theme"
      className="p-2 rounded-full bg-white dark:bg-gray-900 hover:bg-white dark:hover:bg-gray-900 transition-colors"
    >
      {isDarkMode ? <Sun className="w-6 h-6" /> : <Moon className="w-6 h-6" />}
    </button>
  );
}


lib/firebaseConfig.js:
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app)
export {db}

lib/productService.js:
import { db } from "./firebaseConfig";
import {
  collection,
  addDoc,
  getDocs,
  doc,
  updateDoc,
  deleteDoc,
} from "firebase/firestore";

const productsCollection = collection(db, "products");

export const productService = {
  addProduct: async (product) => {
    try {
      const docRef = await addDoc(productsCollection, product);
      return { id: docRef.id, ...product };
    } catch (error) {
      console.error("Error adding product:", error);
      throw error;
    }
  },

  getProducts: async () => {
    try {
      const snapshot = await getDocs(productsCollection);
      return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error("Error getting products:", error);
      throw error;
    }
  },

  updateProduct: async (id, updates) => {
    try {
      await updateDoc(doc(db, "products", id), updates);
    } catch (error) {
      console.error("Error updating product:", error);
      throw error;
    }
  },

  deleteProduct: async (id) => {
    try {
      await deleteDoc(doc(db, "products", id));
    } catch (error) {
      console.error("Error deleting product:", error);
      throw error;
    }
  },
};

