.env.local:
NEXT_PUBLIC_FIREBASE_PROJECT_ID="sofware-database"
NEXT_PUBLIC_FIREBASE_API_KEY="AIzaSyBVIZfwrq9Gi6PRFpF95ffF04Tc4EmJ5Hk"
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="sofware-database.firebaseapp.com"
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="sofware-database.firebasestorage.app"
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="745186780986"
NEXT_PUBLIC_FIREBASE_APP_ID="1:745186780986:web:e9f70b18d3d0bee4d79203"

AUTH_FIREBASE_CLIENT_EMAIL="firebase-adminsdk-fbsvc@sofware-database.iam.gserviceaccount.com"
AUTH_FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDLA/YzCebzvzlP\nhnWqUyHVlOaV2oSl4eJ4hAeRLzEy0RpX8vEoK5hkTTXg8nSkWRxG2O2W2iCPRiT7\n144Z3WYt886H2xCfref0OoCM1G8RUubrntarhuxyOhtICxjMV8C2BZ5Gq7b1RnZL\nMAWZADvxSjmNzUNACzbWGgiJAV0NQ+uARBJk8PCRdQsJhj+b273JcshU3fBzk/cL\nKaDQfGNXsTELDDxn8FVNGacOOdgtHoeRoZjGnBIh6gxaUhmNqbEwaZmmogwdCzdw\n8dRiYqp6IIwfNKFpEDsudZPED7Q5sUPMqKTTA798GAjvxg2T2Zebz6Luxp6eCMQs\n3upinFwpAgMBAAECggEAAiuQRMhgPv6nILmgOSCDLZCLpzJMF4NAKDCQH0/Xg8fl\nz6cCR6KqADDRYZW5B7rHvboVjqhx6FotCR39CN8Nd8CXS91Y8qGWCz+hkhNhNxFm\n0Mj0mdDiH9Bp5QzbNNNxQz/4NVliNDrgjgos+V122FotVz3WxZnBFpMgwF5J0kKH\n5vmvBXW3/LUH71YPeIbVX+xOJyaTIuloluSg/Y0bSerd383oYBEJUOYGBHCW97X1\nfLYoX0XxNMR1b3aBnNOizCpWlm8Phu8If/bWXsNuCJLsAsCuXMBFrkrCEi3Y/nk8\nInMm2jT2WbG8zh4KpInJaq32DkvHMZP2Wb1ne88YgQKBgQD183YGK1vFBw12/+/f\n01XgjNOvSjARrRmlVL9+t2M159TUXN3VR6EFE8uTUK5GLUYrs+n1blCzxLWjJa4T\noYSqhy2Mq2HsdX+ls+ptYw6CS8yVph3ejiGz8ELm9duTOHwx6kf1RQPQgB8Ur56i\nld3zvKjVNysluYFijQXwseJGgQKBgQDTT2nzOP4W6qZbl/HEu8JXWtBzvK+fc5FL\nWs7ZIGBVwDyAkiTls60ccyPfKgo9zuLEUr1tw/enshlPq5hZDhAfFF+7zNBPZ4On\n6HDpOgVTk/ShCeWBK8BdC1YAxyX4wzSs0dBl5MM8+A1/tdGFXUVapfkQ2Y4rMp7N\n5tku121RqQKBgQCDfhxVhAzWM8URIBhA1B4PpXrvNnyolqElcT/IIYebJEz3FIdN\nJbSCoGiwY+wofMANUWz92HKxCbQKe3Sr7iidexPxJxd9cfxCvQPSY6k4JApG378M\nY3TFXOiHzl4MQaC0lwrNqI43hKgZSSNIzVMSooSpKYuZ6amw5LCOVKwjAQKBgDvi\nfKdGVpQOCflZNVZI08nH3d1+8tKggOO3J3nXOBX1NfBF+pjyc7PlWZwsINzlXdS/\nkhmiePQYgB3ZBoLuflkggAUMBVkLf/8824rtO4c1HhXpZRZXXNvBk60Cw1sdjzcO\n+x11WHNV5RV1ZJyEE1yePtisnyLU5LZ7nr8spDmJAoGAebCs0ZWAAz/6sXwuZ2RB\nWc4DtWsqwXrF3BaWkFI44pTEGk6+yKLf0NkNgFtzZ4wlNB3W/bY6nMV4DnDtQ05h\nRiARBsN3X4A0a3WkoyuI3GhjfZVYJvlmovSKmRmtnEhCiUC4InN3xrGxLHKLNCF2\nQuyOtnnoY+Lgg5TXtiLhxGA=\n-----END PRIVATE KEY-----\n"
AUTH_SECRET="/wdrKYukQKKQCS4l7Uy+KgLmMWUnMbQ2qF9cKr8dTjY=" 

EMAIL_SERVER_USER=eromotoya@gmail.com
EMAIL_SERVER_PASSWORD=tsatktjpobeeufvq
EMAIL_SERVER_HOST=smtp.gmail.com
EMAIL_SERVER_PORT=465
EMAIL_FROM=eromotoya@gmail.com

auth.js:
import NextAuth from "next-auth";
import { FirestoreAdapter } from "@auth/firebase-adapter";
import { cert } from "firebase-admin/app";
import Nodemailer from "next-auth/providers/nodemailer";
import { db } from "@/lib/firebaseConfig";
import {
  collection,
  getDocs,
  query,
  where,
  updateDoc,
  addDoc,
} from "firebase/firestore";

export const { handlers, signIn, signOut, auth } = NextAuth({
  providers: [
    Nodemailer({
      server: {
        host: process.env.EMAIL_SERVER_HOST,
        port: process.env.EMAIL_SERVER_PORT,
        auth: {
          user: process.env.EMAIL_SERVER_USER,
          pass: process.env.EMAIL_SERVER_PASSWORD,
        },
        secure: true,
      },
      from: process.env.EMAIL_FROM,
    }),
  ],
  adapter: FirestoreAdapter({
    credential: cert({
      projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
      clientEmail: process.env.AUTH_FIREBASE_CLIENT_EMAIL,
      privateKey: process.env.AUTH_FIREBASE_PRIVATE_KEY.replace(/\\n/g, "\n"),
    }),
  }),
  pages: {
    signIn: "/login",
  },
  callbacks: {
    async signIn({ user }) {
      const adminEmail = "eromotoya@gmail.com";
      if (user.email === adminEmail) {
        return true; 
      }
      const q = query(
        collection(db, "users"),
        where("email", "==", user.email),
        where("role", "==", "Salesperson")
      );
      const querySnapshot = await getDocs(q);
      return !querySnapshot.empty;
    },
    async session({ session }) {
      const { email } = session.user;
      const q = query(collection(db, "users"), where("email", "==", email));
      const querySnapshot = await getDocs(q);

      if (!querySnapshot.empty) {
        const userData = querySnapshot.docs[0].data();
        session.user.role = userData.role || "unknown";
        if (email === "eromotoya@gmail.com") {
          session.user.name = userData.name || "Floridda";
          if (!userData.name) {
            await updateDoc(querySnapshot.docs[0].ref, { name: "Floridda" });
          }
        } else {
          session.user.name = userData.name || "N/A";
        }
      } else if (email === "eromotoya@gmail.com") {
        session.user.role = "Admin";
        session.user.name = "Floridda";
        await addDoc(collection(db, "users"), {
          email,
          role: "admin",
          name: "Floridda",
        });
      } else {
        session.user.role = "unknown";
        session.user.name = "N/A";
      }
      return session;
    },
  },
});

middleware.js:
import { NextResponse } from "next/server";

export async function middleware(request) {
  const path = request.nextUrl.pathname;

  const protectedRoutes = {
    "/dashboard": ["admin", "salesperson"],
    "/products": ["admin"],
    "/sales": ["admin", "salesperson"],
    "/add": ["admin"],
  };

  const isProtected = Object.keys(protectedRoutes).some((route) =>
    path.startsWith(route)
  );

  if (isProtected) {
    const authResponse = await fetch(
      `${request.nextUrl.origin}/api/auth-check`,
      {
        headers: {
          cookie: request.headers.get("cookie"),
        },
      }
    );
    const authData = await authResponse.json();

    if (!authData.authenticated) {
      return NextResponse.redirect(new URL("/login", request.url));
    }

    const allowedRoles = Object.entries(protectedRoutes).find(([route]) =>
      path.startsWith(route)
    )[1];

    if (!allowedRoles.includes(authData.role)) {
      return NextResponse.redirect(new URL("/unauthorized", request.url));
    }
  }

  return NextResponse.next();
}

next.config.mjs:
import { fileURLToPath } from "url";
import path from "path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/** @type {import('next').NextConfig} */
const nextConfig = {
  webpack: (config, { isServer, webpack }) => {
    if (!isServer) {
      config.plugins.push(
        new webpack.NormalModuleReplacementPlugin(/^node:/, (resource) => {
          resource.request = resource.request.replace(/^node:/, "");
        })
      );
      config.resolve.fallback = {
        ...config.resolve.fallback,
        process: path.resolve(__dirname, "node_modules/process/browser.js"),
      };
    }
    return config;
  },
};

export default nextConfig;

package.json:
{
  "name": "final",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@auth/firebase-adapter": "^2.9.1",
    "firebase": "^11.7.3",
    "firebase-admin": "^12.7.0",
    "framer-motion": "^12.12.1",
    "lucide-react": "^0.511.0",
    "next": "15.3.2",
    "next-auth": "^5.0.0-beta.28",
    "nodemailer": "^6.10.1",
    "process": "^0.11.10",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-tooltip": "^5.28.1",
    "recharts": "^2.15.3"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.1"
  }
}


tailwind.config.js:
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./app/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
  darkMode: 'class',
};

app/add/layout.js:
import Layout from "@/components/Layout";

export default function AddLayout({ children }) {
  return <Layout>{children}</Layout>;
}

app/add/page.js:
"use client";
import { useState } from "react";
import { db } from "@/lib/firebaseConfig";
import {
  collection,
  addDoc,
  getDocs,
  deleteDoc,
  doc,
} from "firebase/firestore";
import FormField from "@/components/FormField";
import Button from "@/components/Button";
import Table from "@/components/Table";
import Modal from "@/components/Modal";
import { Trash } from "lucide-react";

export default function AddPage() {
  const [salespersons, setSalespersons] = useState([]);
  const [formData, setFormData] = useState({ email: "", name: "", phone: "" });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [showAddModal, setShowAddModal] = useState(false);
  const [showConfirmDelete, setShowConfirmDelete] = useState(false);
  const [salespersonToDelete, setSalespersonToDelete] = useState(null);
  const [hasFetched, setHasFetched] = useState(false);

  const fetchSalespersons = async () => {
    setLoading(true);
    try {
      const querySnapshot = await getDocs(collection(db, "users"));
      const data = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setSalespersons(data.filter((user) => user.role === "salesperson"));
      setHasFetched(true);
    } catch (error) {
      console.error("Error fetching salespersons:", error);
      setError("Failed to load salespeople");
    } finally {
      setLoading(false);
    }
  };

  const handleAddSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    try {
      await addDoc(collection(db, "users"), {
        ...formData,
        role: "salesperson",
      });
      setFormData({ email: "", name: "", phone: "" });
      setShowAddModal(false);
      fetchSalespersons();
    } catch (error) {
      setError("Failed to add salesperson.");
      console.error("Error:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleDelete = (salesperson) => {
    setSalespersonToDelete(salesperson);
    setShowConfirmDelete(true);
  };

  const confirmDelete = async () => {
    if (salespersonToDelete) {
      try {
        await deleteDoc(doc(db, "users", salespersonToDelete.id));
        setSalespersons(
          salespersons.filter((s) => s.id !== salespersonToDelete.id)
        );
      } catch (error) {
        console.error("Error deleting salesperson:", error);
      }
      setShowConfirmDelete(false);
      setSalespersonToDelete(null);
    }
  };

  const columns = [
    { key: "name", label: "Name" },
    { key: "email", label: "Email" },
    { key: "phone", label: "Phone" },
  ];

  const actions = [
    {
      onClick: handleDelete,
      icon: <Trash className="w-5 h-5 text-red-600" />,
    },
  ];

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
        Manage Salespeople
      </h1>

      <div className="flex justify-between mb-8">
        <Button onClick={fetchSalespersons} disabled={loading}>
          {loading ? "Loading..." : "View"}
        </Button>
        <Button onClick={() => setShowAddModal(true)}>Add</Button>
      </div>

      {hasFetched ? (
        salespersons.length > 0 ? (
          <Table columns={columns} data={salespersons} actions={actions} />
        ) : (
          <p className="text-gray-900 dark:text-white">
            No salespeople added yet.
          </p>
        )
      ) : (
        <p className="text-gray-900 dark:text-white">
          Click "View" to see salespeople.
        </p>
      )}

      {error && <p className="text-red-500 mb-4">{error}</p>}

      <Modal
        isOpen={showAddModal}
        onClose={() => setShowAddModal(false)}
        title="Add Salesperson"
      >
        <form onSubmit={handleAddSubmit} className="space-y-4">
          <FormField
            label="Email"
            name="email"
            type="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
          <FormField
            label="Name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
          />
          <FormField
            label="Phone"
            name="phone"
            value={formData.phone}
            onChange={handleChange}
          />
          <div className="flex justify-end space-x-2">
            <Button onClick={() => setShowAddModal(false)}>Cancel</Button>
            <Button type="submit" disabled={loading}>
              {loading ? "Adding..." : "Add Salesperson"}
            </Button>
          </div>
        </form>
      </Modal>

      <Modal
        isOpen={showConfirmDelete}
        onClose={() => setShowConfirmDelete(false)}
        title="Confirm Removal"
      >
        <p className="mb-4 text-gray-700 dark:text-gray-300">
          Are you sure you want to remove this salesperson?
        </p>
        <div className="flex justify-end space-x-2">
          <Button onClick={() => setShowConfirmDelete(false)}>Cancel</Button>
          <Button
            onClick={confirmDelete}
            className="bg-red-600 hover:bg-red-700"
          >
            Remove
          </Button>
        </div>
      </Modal>
    </div>
  );
}

add/api/auth/[...nexauth]/route.js:
import { handlers } from "@/auth";
export const { GET, POST } = handlers

add/api/auth-check/route.js:
import { auth } from "@/auth";

export async function GET(request) {
  const session = await auth();
  if (session) {
    return new Response(
      JSON.stringify({ authenticated: true, role: session.user.role }),
      {
        status: 200,
        headers: { "Content-Type": "application/json" },
      }
    );
  } else {
    return new Response(JSON.stringify({ authenticated: false }), {
      status: 200,
      headers: { "Content-Type": "application/json" },
    });
  }
}

app/dashboard/layout.js:
import Layout from "@/components/Layout";

export default function DashboardLayout({ children }) {
  return <Layout>{children}</Layout>;
}

app/dashboard/page.js:
"use client";
import { useState, useEffect } from "react";
import { db } from "@/lib/firebaseConfig";
import { collection, getDocs } from "firebase/firestore";
import {
  BarChart,
  PieChart,
  Bar,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
} from "recharts";
import { useTheme } from "@/components/ThemeContext";

export default function DashboardPage() {
  const { isDarkMode } = useTheme();
  const [sales, setSales] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  const chartColors = {
    text: isDarkMode ? "#fff" : "#000",
    grid: isDarkMode ? "#4a5568" : "#cbd5e0",
    bar: isDarkMode ? "#4299e1" : "#2b6cb0",
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const salesSnapshot = await getDocs(collection(db, "sales"));
        const salesData = salesSnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
          date: new Date(doc.data().timestamp).toLocaleDateString(),
        }));
        setSales(salesData);

        const productsSnapshot = await getDocs(collection(db, "products"));
        const productsData = productsSnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setProducts(productsData);
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const processChartData = () => {
    const dailySales = sales.reduce((acc, sale) => {
      acc[sale.date] = (acc[sale.date] || 0) + sale.totalAmount;
      return acc;
    }, {});

    const categoryDistribution = products.reduce((acc, product) => {
      acc[product.category] = (acc[product.category] || 0) + product.quantity;
      return acc;
    }, {});

    return {
      dailySales: Object.entries(dailySales).map(([date, amount]) => ({
        date,
        amount,
      })),
      categoryData: Object.entries(categoryDistribution).map(
        ([name, value]) => ({ name, value })
      ),
    };
  };

  const { dailySales, categoryData } = processChartData();

  if (loading)
    return (
      <p className="text-gray-900 dark:text-white p-4">Loading dashboard...</p>
    );

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6 text-gray-900 dark:text-white">
        Dashboard Overview
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
          <h2 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
            Daily Sales
          </h2>
          <BarChart width={500} height={300} data={dailySales}>
            <CartesianGrid strokeDasharray="3 3" stroke={chartColors.grid} />
            <XAxis dataKey="date" tick={{ fill: chartColors.text }} />
            <YAxis tick={{ fill: chartColors.text }} />
            <Tooltip />
            <Legend />
            <Bar dataKey="amount" fill={chartColors.bar} name="Daily Revenue" />
          </BarChart>
        </div>

        <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow">
          <h2 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">
            Inventory by Category
          </h2>
          <PieChart width={500} height={300}>
            <Pie
              data={categoryData}
              dataKey="value"
              nameKey="name"
              cx="50%"
              cy="50%"
              outerRadius={80}
              label={({ name, percent }) =>
                `${name} ${(percent * 100).toFixed(0)}%`
              }
            >
              {categoryData.map((entry, index) => (
                <Cell
                  key={index}
                  fill={`#${Math.floor(Math.random() * 16777215).toString(16)}`}
                />
              ))}
            </Pie>
            <Tooltip />
            <Legend />
          </PieChart>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
        <div className="bg-blue-100 dark:bg-blue-900 p-4 rounded-lg">
          <h3 className="text-gray-900 dark:text-white">Total Products</h3>
          <p className="text-2xl font-bold text-gray-900 dark:text-white">
            {products.length}
          </p>
        </div>
        <div className="bg-green-100 dark:bg-green-900 p-4 rounded-lg">
          <h3 className="text-gray-900 dark:text-white">Total Sales</h3>
          <p className="text-2xl font-bold text-gray-900 dark:text-white">
            {sales.length}
          </p>
        </div>
        <div className="bg-purple-100 dark:bg-purple-900 p-4 rounded-lg">
          <h3 className="text-gray-900 dark:text-white">Total Revenue</h3>
          <p className="text-2xl font-bold text-gray-900 dark:text-white">
            ₦
            {sales
              .reduce((sum, sale) => sum + (sale.totalAmount || 0), 0)
              .toFixed(2)}
          </p>
        </div>
      </div>
    </div>
  );
}

app/login/page.js:
"use client";
import Image from "next/image";
import { Smartphone, Moon, Sun } from "lucide-react";
import { useState } from "react";
import { signIn } from "next-auth/react";
import ThemeToggle from "@/components/ThemeToggle";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setMessage("");
    setLoading(true);
    const res = await signIn("nodemailer", {
      email: email,
      redirect: false,
      callbackUrl: "/dashboard",
    });
    setLoading(false);
    if (res?.error) {
      setError("Failed to send login email.");
    } else {
      setMessage("Check your email!");
      setEmail("");
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-white dark:bg-gray-900 shadow-lg">
      <div className="absolute top-4 right-4">
        <ThemeToggle />
      </div>

      <div className="bg-white dark:bg-gray-900 border-2 border-gray-300 dark:border-gray-400 rounded-xl overflow-hidden flex flex-col md:flex-row w-full max-w-6xl shadow-2xl">
        <div className="hidden md:block relative md:w-1/2">
          <Image
            src="/Phones.jpg"
            alt="Shopping illustration"
            fill
            className="object-cover"
          />
        </div>

        <div className="p-8 w-full md:w-1/2">
          <div className="flex flex-col items-center mb-8">
            <Smartphone className="h-12 w-12 text-purple-600" />
            <p className="mt-1 text-gray-600 dark:text-gray-100">
              Welcome to{" "}
              <span className="font-semibold text-gray-900 dark:text-white">
                Floridda Software
              </span>
            </p>
          </div>

          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-6 text-center">
            Login To Dashboard
          </h2>
          <hr className="border-gray-300 mb-6" />

          <form onSubmit={handleSubmit} className="space-y-5">
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-900 dark:text-white"
              >
                Enter Address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                placeholder="Enter Email Address"
                className="mt-1 block w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500 text-gray-950"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loading}
              />
            </div>

            <button
              type="submit"
              className="w-full py-3 bg-purple-600 text-white rounded-lg font-medium hover:bg-purple-700 transition cursor-pointer"
              disabled={loading}
            >
              {loading ? "Sending..." : "Login"}
            </button>

            {error && (
              <div className="bg-red-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">
                {error}
              </div>
            )}

            {message && (
              <div className="bg-green-500 text-white w-fit text-sm py-1 px-3 rounded-md mt-2">
                {message}
              </div>
            )}
          </form>
        </div>
      </div>
    </div>
  );
}


app/products/layout.js:
import Layout from "@/components/Layout";

export default function ProductsLayout({ children }) {
  return <Layout>{children}</Layout>;
}

app/products/page.js:
"use client";
import { useState } from "react";
import { db } from "@/lib/firebaseConfig";
import { collection, getDocs, deleteDoc, doc } from "firebase/firestore";
import RegisterProduct from "@/components/RegisterProduct";
import Table from "@/components/Table";
import Modal from "@/components/Modal";
import Button from "@/components/Button";
import { Edit, Trash } from "lucide-react";
import { useSearch } from "@/context/SearchContext";

export default function ProductsPage() {
  const [showModal, setShowModal] = useState(false);
  const [productToEdit, setProductToEdit] = useState(null);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [hasFetched, setHasFetched] = useState(false);
  const [showConfirmDelete, setShowConfirmDelete] = useState(false);
  const [productToDelete, setProductToDelete] = useState(null);
  const { searchTerm } = useSearch();

  const fetchProducts = async () => {
    setLoading(true);
    try {
      const querySnapshot = await getDocs(collection(db, "products"));
      const productsData = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setProducts(productsData);
      setHasFetched(true);
    } catch (error) {
      console.error("Error fetching products:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = (product) => {
    setProductToDelete(product);
    setShowConfirmDelete(true);
  };

  const confirmDelete = async () => {
    if (productToDelete) {
      try {
        await deleteDoc(doc(db, "products", productToDelete.id));
        setProducts(products.filter((p) => p.id !== productToDelete.id));
      } catch (error) {
        console.error("Error deleting product:", error);
      }
      setShowConfirmDelete(false);
      setProductToDelete(null);
    }
  };

  const handleEdit = (product) => {
    setProductToEdit(product);
    setShowModal(true);
  };

  const filteredProducts = products.filter((product) =>
    product.item.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const columns = [
    { key: "item", label: "Item" },
    { key: "quantity", label: "Quantity" },
    { key: "amountPerUnit", label: "Amount/Unit" },
    { key: "modelNumber", label: "Model" },
    { key: "serialNumber", label: "Serial" },
    { key: "category", label: "Category" },
    { key: "subCategory", label: "Sub Category" },
  ];

  const actions = [
    {
      onClick: handleEdit,
      icon: <Edit className="w-5 h-5 text-blue-600" />,
    },
    {
      onClick: handleDelete,
      icon: <Trash className="w-5 h-5 text-red-600" />,
    },
  ];

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between mb-8">
        <Button onClick={fetchProducts} disabled={loading}>
          {loading ? "Loading..." : "View"}
        </Button>
        <Button
          onClick={() => {
            setProductToEdit(null);
            setShowModal(true);
          }}
        >
          Register
        </Button>
      </div>

      {showModal && (
        <RegisterProduct
          productToEdit={productToEdit}
          onClose={() => setShowModal(false)}
          onSaveComplete={fetchProducts}
        />
      )}

      {loading ? (
        <p className="text-gray-900 dark:text-white">Loading products...</p>
      ) : hasFetched ? (
        filteredProducts.length > 0 ? (
          <Table columns={columns} data={filteredProducts} actions={actions} />
        ) : (
          <p className="text-gray-900 dark:text-white">No products found.</p>
        )
      ) : (
        <p className="text-gray-900 dark:text-white">
          Click "View" to see products.
        </p>
      )}

      <Modal
        isOpen={showConfirmDelete}
        onClose={() => setShowConfirmDelete(false)}
        title="Confirm Deletion"
      >
        <p className="mb-4 text-gray-700 dark:text-gray-300">
          Are you sure you want to delete this product?
        </p>
        <div className="flex justify-end space-x-2">
          <Button onClick={() => setShowConfirmDelete(false)}>Cancel</Button>
          <Button
            onClick={confirmDelete}
            className="bg-red-600 hover:bg-red-700"
          >
            Delete
          </Button>
        </div>
      </Modal>
    </div>
  );
}


app/sales/layout.js:
import Layout from "@/components/Layout";

export default function SalesLayout({ children }) {
  return <Layout>{children}</Layout>;
}

app/sales/page.js:
"use client";
import { useEffect, useState } from "react";
import { db } from "@/lib/firebaseConfig";
import {
  collection,
  onSnapshot,
  updateDoc,
  doc,
  addDoc,
} from "firebase/firestore";
import { useSession } from "next-auth/react";
import Table from "@/components/Table";
import Modal from "@/components/Modal";
import Button from "@/components/Button";
import { useSearch } from "@/context/SearchContext";

export default function SalesPage() {
  const { data: session } = useSession();
  const [products, setProducts] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [sellQuantity, setSellQuantity] = useState("");
  const [showSellModal, setShowSellModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const { searchTerm } = useSearch();

  useEffect(() => {
    const unsubscribe = onSnapshot(
      collection(db, "products"),
      (snapshot) => {
        const productsData = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setProducts(productsData);
        setLoading(false);
      },
      (err) => {
        console.error("Error listening to products:", err);
        setError("Failed to load products");
        setLoading(false);
      }
    );

    return () => unsubscribe();
  }, []);

  // Filter products based on global search term
  const filteredProducts = products.filter((product) =>
    product.item.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSell = (product) => {
    setSelectedProduct(product);
    setSellQuantity("");
    setShowSellModal(true);
  };

  const confirmSell = async () => {
    if (!selectedProduct || !sellQuantity || sellQuantity <= 0) return;
    const quantityToSell = parseInt(sellQuantity);
    if (quantityToSell > selectedProduct.quantity) {
      alert("Cannot sell more than available quantity!");
      return;
    }

    try {
      const newQuantity = selectedProduct.quantity - quantityToSell;
      await updateDoc(doc(db, "products", selectedProduct.id), {
        quantity: newQuantity,
      });
      await addDoc(collection(db, "sales"), {
        productId: selectedProduct.id,
        item: selectedProduct.item,
        quantity: quantityToSell,
        totalAmount: quantityToSell * selectedProduct.amountPerUnit,
        salespersonId: session?.user?.email || "unknown",
        timestamp: new Date().toISOString(),
      });
      if (newQuantity < 5 && session?.user?.email) {
        await addDoc(collection(db, "notifications"), {
          userId: session.user.email,
          message: `${selectedProduct.item} is low on stock (${newQuantity} left)`,
          read: false,
          timestamp: new Date().toISOString(),
        });
      }
      setShowSellModal(false);
      setSelectedProduct(null);
    } catch (error) {
      console.error("Error processing sale:", error);
      setError("Failed to process sale");
    }
  };

  const handleView = (product) => {
    setSelectedProduct(product);
    setShowViewModal(true);
  };

  const columns = [
    { key: "item", label: "Item" },
    { key: "quantity", label: "Quantity" },
    { key: "amountPerUnit", label: "Amount/Unit" },
    { key: "modelNumber", label: "Model" },
    { key: "serialNumber", label: "Serial" },
    { key: "category", label: "Category" },
    { key: "subCategory", label: "Sub Category" },
  ];

  const actions = [
    { label: "Sell", onClick: handleSell },
    { label: "View", onClick: handleView },
  ];

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
        Sales
      </h1>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      {loading ? (
        <p className="text-gray-900 dark:text-white">Loading products...</p>
      ) : filteredProducts.length > 0 ? (
        <Table columns={columns} data={filteredProducts} actions={actions} />
      ) : (
        <p className="text-gray-900 dark:text-white">No products found.</p>
      )}

      <Modal
        isOpen={showSellModal}
        onClose={() => setShowSellModal(false)}
        title="Sell Product"
      >
        <p className="mb-4 text-gray-700 dark:text-gray-300">
          Enter quantity to sell for {selectedProduct?.item}:
        </p>
        <input
          type="number"
          value={sellQuantity}
          onChange={(e) => setSellQuantity(e.target.value)}
          className="mb-4 block w-full rounded-md border-gray-300 shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          min="1"
          max={selectedProduct?.quantity}
        />
        <div className="flex justify-end space-x-2">
          <Button onClick={() => setShowSellModal(false)}>Cancel</Button>
          <Button onClick={confirmSell}>Sell</Button>
        </div>
      </Modal>

      <Modal
        isOpen={showViewModal}
        onClose={() => setShowViewModal(false)}
        title="Product Details"
      >
        {selectedProduct && (
          <div className="text-gray-700 dark:text-gray-300">
            <p>
              <strong>Item:</strong> {selectedProduct.item}
            </p>
            <p>
              <strong>Quantity:</strong> {selectedProduct.quantity}
            </p>
            <p>
              <strong>Amount/Unit:</strong> {selectedProduct.amountPerUnit}
            </p>
            <p>
              <strong>Model Number:</strong> {selectedProduct.modelNumber}
            </p>
            <p>
              <strong>Serial Number:</strong> {selectedProduct.serialNumber}
            </p>
            <p>
              <strong>Category:</strong> {selectedProduct.category}
            </p>
            <p>
              <strong>Sub Category:</strong> {selectedProduct.subCategory}
            </p>
            <p>
              <strong>Color:</strong> {selectedProduct.color || "N/A"}
            </p>
            <p>
              <strong>Storage:</strong> {selectedProduct.storage || "N/A"}
            </p>
            <p>
              <strong>Description:</strong>{" "}
              {selectedProduct.description || "N/A"}
            </p>
          </div>
        )}
        <div className="flex justify-end mt-4">
          <Button onClick={() => setShowViewModal(false)}>Close</Button>
        </div>
      </Modal>
    </div>
  );
}

app/unauthrized/page.js:
import { motion } from 'framer-motion';

export default function UnauthorizedPage() {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900"
    >
      <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
        Unauthorized Access
      </h1>
      <p className="mt-4 text-gray-700 dark:text-gray-300">
        You do not have permission to view this page.
      </p>
    </motion.div>
  );
}

app/globals.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: white;
  --text: black;
}

.dark {
  --background: #1a1a1a;
  --text: white;
}

body {
  background: var(--background);
  color: var(--text);
  transition: background 0.3s, color 0.3s;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.fade-in {
  animation: fadeIn 0.5s ease-in;
}

.tooltip {
  position: relative;
}

.tooltip:hover::after {
  content: attr(data-tooltip);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  background: #333;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  white-space: nowrap;
}

app/layout.js:
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/ThemeContext";
import { SessionProvider } from "next-auth/react";
import { SearchProvider } from "@/context/SearchContext";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Floridda",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <SessionProvider>
          <ThemeProvider>
            <SearchProvider>{children}</SearchProvider>
          </ThemeProvider>
        </SessionProvider>
      </body>
    </html>
  );
}

app/page.js:
import { redirect } from "next/navigation";

export default function Home() {
  redirect ("/login");
  return null;
}

components/AuthProvider.js:
"use client"
import { SessionProvider } from 'next-auth/react'
import React from 'react'

const AuthProvider = ({children}) => {
  return (
    <main>
        <SessionProvider>{children}</SessionProvider>
    </main>
  )
}

export default AuthProvider;

components/Button.jsx:
import React from "react";

export default function Button({
  onClick,
  children,
  disabled = false,
  className = "",
  type = "button",
}) {
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={`px-4 py-2 rounded-lg font-medium transition ${className} ${
        disabled
          ? "bg-gray-400 cursor-not-allowed"
          : "bg-blue-600 hover:bg-blue-700 text-white"
      }`}
    >
      {children}
    </button>
  );
}


components/CollapseButton.jsx:
"use client";
import { Menu } from "lucide-react";

export default function CollapseButton({ isCollapsed, toggleCollapse }) {
  return (
    <button
      onClick={toggleCollapse}
      className={`flex items-center p-2 rounded-lg w-full ${
        isCollapsed ? "justify-center" : "justify-start"
      } text-gray-900 dark:text-white lg:hidden`}
    >
      <Menu className={`w-6 h-6 ${isCollapsed ? "mx-auto" : "mr-3"}`} />
      {!isCollapsed && <span></span>}
    </button>
  );
}

components/ConfirmDeleteModal.jsx:
"use client";

export default function ConfirmDeleteModal({ isOpen, onClose, onConfirm }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg">
        <h2 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">
          Confirm Deletion
        </h2>
        <p className="mb-4 text-gray-700 dark:text-gray-300">
          Are you sure you want to delete this product?
        </p>
        <div className="flex justify-end space-x-2">
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 dark:bg-gray-600 dark:text-white"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );
}

components/Footer.jsx:
"use client"
export default function Footer() {
  return (
    <footer>
      <span className="text-[0.7em]">&copy; 2025 Floridda Software</span>
    </footer>
  );
}

components/FormField.jsx:
import React from "react";

export default function FormField({
  label,
  name,
  type = "text",
  value,
  onChange,
  required = false,
  disabled = false,
}) {
  return (
    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
      {label} {required && "*"}
      <input
        type={type}
        name={name}
        value={value}
        onChange={onChange}
        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
        required={required}
        disabled={disabled}
      />
    </label>
  );
}

components/Layout.jsx:
"use client";
import { useState, useEffect } from "react";
import Sidebar from "./Sidebar";
import Navbar from "./Navbar";

export default function Layout({ children }) {
  const [isCollapsed, setIsCollapsed] = useState(true);

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        setIsCollapsed(false);
      } else {
        setIsCollapsed(true);
      }
    };

    handleResize();
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return (
    <div className="flex flex-col min-h-screen bg-white dark:bg-gray-900">
      <Navbar />
      
      <div className="flex flex-1">
        <Sidebar
          isCollapsed={isCollapsed}
          toggleCollapse={() => setIsCollapsed(!isCollapsed)}
        />
        
        <main className={`
          flex-1 
          transition-all duration-300 
          ${isCollapsed ? "ml-10" : "-ml-5"}
          min-h-[calc(100vh-4rem)]
          p-4
        `}>
          {children}
        </main>
      </div>
    </div>
  );
}

components/Modal.jsx:
import React from "react";

export default function Modal({ isOpen, children, title }) {
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg w-full max-w-2xl">
        {title && (
          <h2 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">
            {title}
          </h2>
        )}
        {children}
      </div>
    </div>
  );
}


components/Navbar.jsx:
"use client";
import Link from "next/link";
import { Bell, User, PhoneCall, LogOut } from "lucide-react";
import { useEffect, useState } from "react";
import ThemeToggle from "./ThemeToggle";
import SettingsDropdown from "./SettingsDropdown";
import { useTheme } from "./ThemeContext";
import { useSession } from "next-auth/react";
import { db } from "@/lib/firebaseConfig";
import { collection, query, where, getDocs } from "firebase/firestore";
import UserInfo from "./UserInfo";
import NotificationList from "./NotificationList";
import SearchBar from "./SearchBar";
import ReactTooltip from "react-tooltip";

export default function Navbar() {
  const { isDarkMode } = useTheme();
  const { data: session } = useSession();
  const [notifications, setNotifications] = useState([]);
  const [showProfileDropdown, setShowProfileDropdown] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);

  useEffect(() => {
    if (session?.user?.email) {
      const fetchNotifications = async () => {
        try {
          const q = query(
            collection(db, "notifications"),
            where("userId", "==", session.user.email),
            where("read", "==", false)
          );
          const querySnapshot = await getDocs(q);
          setNotifications(
            querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))
          );
        } catch (error) {
          console.error("Error fetching notifications:", error);
        }
      };
      fetchNotifications();
    }
  }, [session]);

  const handleLogout = () => {
    window.location.href = "/login";
  };

  return (
    <nav className="flex items-center justify-between h-16 w-screen px-4 sm:px-5 lg:px-6 shadow bg-white dark:bg-gray-900">
      <Link href="/dashboard" className="flex gap-2 sm:gap-3 md:gap-4">
        <div className="flex items-center gap-1 text-2xl font-bold text-blue-400 hover:text-blue-500 transition-colors">
          <PhoneCall className="w-4 h-4 lg:w-7 lg:h-7 md:w-6 md:h-6 sm:w-5 sm:h-5" />
          <h6 className="lg:text-3xl md:text-2xl sm:text-xl text-base">
            Floridda
          </h6>
        </div>
      </Link>

      <div className="flex flex-1 max-w-2xl mx-4">
        <SearchBar />
      </div>

      <div className="hidden items-center gap-8 lg:flex">
        <ThemeToggle />

        <div className="relative" data-tip="Notifications">
          <button
            onClick={() => {
              setShowNotifications(!showNotifications);
              setShowProfileDropdown(false);
            }}
            className="text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 p-2 rounded-full relative"
          >
            <Bell className="w-6 h-6" />
            {notifications.length > 0 && (
              <span className="absolute top-0 right-0 bg-red-500 text-white rounded-full w-4 h-4 text-xs flex items-center justify-center">
                {notifications.length}
              </span>
            )}
          </button>
          <ReactTooltip effect="solid" />
          {showNotifications && (
            <div className="absolute right-0 mt-2 bg-white dark:bg-gray-800 rounded-lg shadow-xl py-2 z-50">
              <NotificationList onClose={() => setShowNotifications(false)} />
            </div>
          )}
        </div>

        <div className="relative" data-tip="Profile">
          <button
            onClick={() => {
              setShowProfileDropdown(!showProfileDropdown);
              setShowNotifications(false);
            }}
            className="text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 p-2 rounded-full"
          >
            <User className="w-6 h-6" />
          </button>
          <ReactTooltip effect="solid" />
          {showProfileDropdown && (
            <div className="absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-xl py-2 z-50">
              <UserInfo />
            </div>
          )}
        </div>

        <button
          onClick={handleLogout}
          className="text-red-600 hover:bg-gray-100 dark:hover:bg-gray-700 p-2 rounded-full"
          data-tip="Logout"
        >
          <LogOut className="w-6 h-6" />
          <ReactTooltip effect="solid" />
        </button>
      </div>

      <div className="lg:hidden">
        <SettingsDropdown />
      </div>
    </nav>
  );
}

components/NotificationList.jsx:
"use client";
import { useState, useEffect } from "react";
import { db } from "@/lib/firebaseConfig";
import {
  collection,
  query,
  where,
  getDocs,
  updateDoc,
  doc,
} from "firebase/firestore";
import { useSession } from "next-auth/react";

export default function NotificationList({ onClose }) {
  const { data: session } = useSession();
  const [notifications, setNotifications] = useState([]);

  useEffect(() => {
    if (session?.user?.email) {
      const fetchNotifications = async () => {
        try {
          const q = query(
            collection(db, "notifications"),
            where("userId", "==", session.user.email),
            where("read", "==", false)
          );
          const querySnapshot = await getDocs(q);
          setNotifications(
            querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }))
          );
        } catch (error) {
          console.error("Error fetching notifications:", error);
        }
      };
      fetchNotifications();
    }
  }, [session]);

  const markAsRead = async (id) => {
    try {
      await updateDoc(doc(db, "notifications", id), { read: true });
      setNotifications(notifications.filter((n) => n.id !== id));
    } catch (error) {
      console.error("Error marking notification as read:", error);
    }
  };

  return (
    <div className="w-64 max-h-64 overflow-y-auto">
      {notifications.length > 0 ? (
        notifications.map((notification) => (
          <div
            key={notification.id}
            className="px-4 py-2 text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            <p>{notification.message}</p>
            <p className="text-xs">
              {new Date(notification.timestamp).toLocaleString()}
            </p>
            <button
              onClick={() => markAsRead(notification.id)}
              className="text-blue-600 hover:underline text-sm"
            >
              Mark as Read
            </button>
          </div>
        ))
      ) : (
        <p className="px-4 py-2 text-gray-800 dark:text-white">
          No new notifications
        </p>
      )}
    </div>
  );
}

components/ProductList.jsx:
"use client";
import { Edit, Trash } from "lucide-react";

export default function ProductList({ products, onEdit, onDelete }) {
  return (
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead className="bg-gray-50 dark:bg-gray-800">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Item
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Quantity
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Amount/Unit
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Model
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Serial
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Category
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Sub Category
            </th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700">
          {products.map((product) => (
            <tr key={product.id}>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.item}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.quantity}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.amountPerUnit}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.modelNumber}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.serialNumber}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.category}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white">
                {product.subCategory}
              </td>
              <td className="px-6 py-4 whitespace-nowrap">
                <button
                  onClick={() => onEdit(product)}
                  className="text-blue-600 hover:text-blue-900 mr-4"
                >
                  <Edit className="w-5 h-5" />
                </button>
                <button
                  onClick={() => onDelete(product.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  <Trash className="w-5 h-5" />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

componsnts/RegisterProduct.jsx:
"use client";
import { useState, useEffect } from "react";
import { db } from "@/lib/firebaseConfig";
import { collection, addDoc, updateDoc, doc } from "firebase/firestore";
import FormField from "@/components/FormField";
import Button from "@/components/Button";
import Modal from "@/components/Modal";
import { useSession } from "next-auth/react";

export default function RegisterProduct({
  productToEdit,
  onClose,
  onSaveComplete,
}) {
  const { data: session } = useSession();
  const [formData, setFormData] = useState({
    item: "",
    quantity: "",
    amountPerUnit: "",
    modelNumber: "",
    serialNumber: "",
    color: "",
    storage: "",
    category: "",
    subCategory: "",
    description: "",
  });
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const isEditing = !!productToEdit;

  useEffect(() => {
    if (productToEdit) {
      setFormData({
        item: productToEdit.item || "",
        quantity: productToEdit.quantity || "",
        amountPerUnit: productToEdit.amountPerUnit || "",
        modelNumber: productToEdit.modelNumber || "",
        serialNumber: productToEdit.serialNumber || "",
        color: productToEdit.color || "",
        storage: productToEdit.storage || "",
        category: productToEdit.category || "",
        subCategory: productToEdit.subCategory || "",
        description: productToEdit.description || "",
      });
    } else {
      setFormData({
        item: "",
        quantity: "",
        amountPerUnit: "",
        modelNumber: "",
        serialNumber: "",
        color: "",
        storage: "",
        category: "",
        subCategory: "",
        description: "",
      });
    }
  }, [productToEdit]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    if (
      !formData.item ||
      !formData.quantity ||
      !formData.amountPerUnit ||
      !formData.modelNumber ||
      !formData.serialNumber ||
      !formData.category ||
      !formData.subCategory
    ) {
      setError("Please fill in all required fields");
      setLoading(false);
      return;
    }

    try {
      if (isEditing) {
        await updateDoc(doc(db, "products", productToEdit.id), formData);
      } else {
        await addDoc(collection(db, "products"), formData);
      }
      if (formData.quantity < 5 && session?.user?.email) {
        await addDoc(collection(db, "notifications"), {
          userId: session.user.email,
          message: `${formData.item} is low on stock (${formData.quantity} left)`,
          read: false,
          timestamp: new Date().toISOString(),
        });
      }
      onSaveComplete();
      onClose();
    } catch (err) {
      console.error("Error saving product:", err);
      setError("Failed to save product");
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  return (
    <Modal
      isOpen={true}
      onClose={onClose}
      title={isEditing ? "Edit Product" : "Register New Product"}
    >
      <form
        onSubmit={handleSubmit}
        className="grid grid-cols-1 md:grid-cols-2 gap-4"
      >
        <div className="space-y-4">
          <FormField
            label="Item Name"
            name="item"
            value={formData.item}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Quantity"
            name="quantity"
            type="number"
            value={formData.quantity}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Amount per Unit"
            name="amountPerUnit"
            type="number"
            value={formData.amountPerUnit}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Model Number"
            name="modelNumber"
            value={formData.modelNumber}
            onChange={handleChange}
            required
            disabled={loading}
          />
        </div>
        <div className="space-y-4">
          <FormField
            label="Serial Number"
            name="serialNumber"
            value={formData.serialNumber}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Category"
            name="category"
            value={formData.category}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Sub Category"
            name="subCategory"
            value={formData.subCategory}
            onChange={handleChange}
            required
            disabled={loading}
          />
          <FormField
            label="Color"
            name="color"
            value={formData.color}
            onChange={handleChange}
            disabled={loading}
          />
        </div>
        <div className="md:col-span-2 space-y-4">
          <FormField
            label="Storage"
            name="storage"
            value={formData.storage}
            onChange={handleChange}
            disabled={loading}
          />
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
            Description
            <textarea
              name="description"
              value={formData.description}
              onChange={handleChange}
              rows={3}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              disabled={loading}
            />
          </label>
        </div>
        {error && <p className="md:col-span-2 text-red-500 text-sm">{error}</p>}
        <div className="md:col-span-2 flex justify-end space-x-2 mt-4">
          <Button onClick={onClose} disabled={loading}>
            Cancel
          </Button>
          <Button type="submit" disabled={loading}>
            {loading ? "Saving..." : isEditing ? "Save" : "Register"}
          </Button>
        </div>
      </form>
    </Modal>
  );
}

components/SearchBar.jsx:
"use client";
import { Search } from "lucide-react";
import { useSearch } from "@/context/SearchContext";
import { useRouter } from "next/navigation";

export default function SearchBar() {
  const { searchTerm, setSearchTerm } = useSearch();
  const router = useRouter();

  const handleSearch = (e) => {
    const value = e.target.value;
    setSearchTerm(value);

    if (!window.location.pathname.includes("/products")) {
      router.push("/products");
    }
  };

  return (
    <div className="relative w-full max-w-2xl">
      <Search className="absolute top-1/2 left-3 w-5 h-5 transform -translate-y-1/2 text-gray-400" />
      <input
        type="text"
        placeholder="Search products..."
        value={searchTerm}
        onChange={handleSearch}
        className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
    </div>
  );
}

components/SettingsDropdown.jsx:
"use client";
import { useState, useEffect } from "react";
import { Sun, Moon, Bell, Settings, LogOut } from "lucide-react";
import { useTheme } from "./ThemeContext";
import UserInfo from "./UserInfo";
import NotificationList from "./NotificationList";

export default function SettingsDropdown() {
  const [isOpen, setIsOpen] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const { isDarkMode, toggleTheme } = useTheme();

  const handleLogout = () => {
    window.location.href = "/login";
  };

  useEffect(() => {
    const closeDropdown = (e) => {
      if (!e.target.closest(".dropdown-container")) {
        setIsOpen(false);
        setShowNotifications(false);
      }
    };
    window.addEventListener("click", closeDropdown);
    return () => window.removeEventListener("click", closeDropdown);
  }, []);

  return (
    <div className="relative dropdown-container">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"
      >
        <Settings className="w-5 h-5" />
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-xl py-2 z-50">
          <div className="px-4 py-2">
            <UserInfo />
          </div>
          <hr className="my-2" />
          <button
            onClick={toggleTheme}
            className="flex items-center px-4 py-2 w-full text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700"
          >
            {isDarkMode ? (
              <Sun className="w-5 h-5 mr-3" />
            ) : (
              <Moon className="w-5 h-5 mr-3" />
            )}
            {isDarkMode ? "Light" : "Dark"}
          </button>
          <button
            onClick={() => setShowNotifications(!showNotifications)}
            className="flex items-center px-4 py-2 text-gray-800 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 w-full"
          >
            <Bell className="w-5 h-5 mr-3" />
            Notifications
          </button>
          {showNotifications && (
            <div className="px-4 py-2">
              <NotificationList onClose={() => setShowNotifications(false)} />
            </div>
          )}
          <button
            onClick={handleLogout}
            className="flex items-center px-4 py-2 text-red-600 hover:bg-gray-100 dark:hover:bg-gray-700 w-full"
          >
            <LogOut className="w-5 h-5 mr-3" />
            Logout
          </button>
        </div>
      )}
    </div>
  );
}


componens/Sidebar.jsx:
"use client";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useSession } from "next-auth/react";
import { Home, Box, DollarSign, PlusSquare } from "lucide-react";
import CollapseButton from "./CollapseButton";
import Footer from "./Footer";

export default function Sidebar({ isCollapsed, toggleCollapse }) {
  const { data: session } = useSession();
  const path = usePathname() || "";

  const items =
    session?.user?.role === "admin"
      ? [
          { href: "/dashboard", icon: Home, label: "Dashboard" },
          { href: "/products", icon: Box, label: "Products" },
          { href: "/sales", icon: DollarSign, label: "Sales" },
          { href: "/add", icon: PlusSquare, label: "Add" },
        ]
      : [
          { href: "/dashboard", icon: Home, label: "Dashboard" },
          { href: "/sales", icon: DollarSign, label: "Sales" },
        ];

  return (
    <aside
      className={`
        fixed lg:relative
        ${isCollapsed ? "w-12" : "w-40"}
        h-[calc(100vh-4rem)] py-6 flex flex-col
        bg-white dark:bg-gray-900
        z-40
      `}
    >
      <nav className="flex-1 px-2 overflow-y-auto">
        <ul className="space-y-2">
          <li>
            <CollapseButton
              isCollapsed={isCollapsed}
              toggleCollapse={toggleCollapse}
            />
          </li>
          {items.map(({ href, icon: Icon, label }) => (
            <li key={href}>
              <Link
                href={href}
                className={`flex items-center p-2 rounded-lg ${
                  path === href
                    ? "bg-blue-200 dark:bg-blue-400 text-gray-900 dark:text-white font-semibold"
                    : "text-gray-900 dark:text-white hover:bg-gray-200 dark:hover:bg-gray-700"
                }`}
              >
                <Icon
                  className={`w-6 h-6 ${isCollapsed ? "mx-auto" : "mr-3"}`}
                />
                {!isCollapsed && <span>{label}</span>}
              </Link>
            </li>
          ))}
        </ul>
      </nav>
      {!isCollapsed && (
        <div className="mt-auto px-2 border-t-2 border-gray-900 dark:border-white shrink-0 text-center">
          <Footer />
        </div>
      )}
    </aside>
  );
}

components/Table.jsx:
import React from "react";

export default function Table({ columns, data, actions = [] }) {
  return (
    <div className="overflow-x-auto fade-in">
      <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead className="bg-gray-50 dark:bg-gray-800">
          <tr>
            {columns.map((col) => (
              <th
                key={col.key}
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase"
              >
                {col.label}
              </th>
            ))}
            {actions.length > 0 && (
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">
                Actions
              </th>
            )}
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200 dark:bg-gray-900 dark:divide-gray-700">
          {data.map((row) => (
            <tr key={row.id}>
              {columns.map((col) => (
                <td
                  key={col.key}
                  className="px-6 py-4 whitespace-nowrap text-gray-900 dark:text-white"
                >
                  {row[col.key]}
                </td>
              ))}
              {actions.length > 0 && (
                <td className="px-6 py-4 whitespace-nowrap">
                  {actions.map((action, idx) => (
                    <button
                      key={idx}
                      onClick={() => action.onClick(row)}
                      className="mr-4"
                    >
                      {action.icon || action.label}
                    </button>
                  ))}
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

components/ThemeContext.js:
'use client';
import { createContext, useContext, useState, useEffect } from 'react';

const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [isDarkMode, setIsDarkMode] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('theme') === 'dark';
    }
    return false;
  });

  useEffect(() => {
    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
    document.documentElement.classList.toggle('dark', isDarkMode);
  }, [isDarkMode]);

  const toggleTheme = () => setIsDarkMode(prev => !prev);

  return (
    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);

componensts/ThemeToggle.jsx:
"use client";
import { Moon, Sun } from "lucide-react";
import { useTheme } from "./ThemeContext";
import { useState, useEffect } from "react";

export default function ThemeToggle() {
  const { isDarkMode, toggleTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return <button className="p-2 rounded-full opacity-0" aria-hidden="true" />;
  }

  return (
    <button
      onClick={toggleTheme}
      aria-label="Toggle theme"
      className="p-2 rounded-full bg-white dark:bg-gray-900 hover:bg-white dark:hover:bg-gray-900 transition-colors"
    >
      {isDarkMode ? <Sun className="w-6 h-6" /> : <Moon className="w-6 h-6" />}
    </button>
  );
}


components/UserInfo.jsx:
"use client";
import { useSession } from "next-auth/react";

export default function UserInfo() {
  const { data: session } = useSession();
  if (!session) return null;
  return (
    <div className="text-gray-800 dark:text-white">
      <p>
        <strong>Name:</strong> {session.user.name || "N/A"}
      </p>
      <p>
        <strong>Email:</strong> {session.user.email}
      </p>
      <p>
        <strong>Role:</strong> {session.user.role}
      </p>
    </div>
  );
}

context/SearchContext.js:
'use client';
import { createContext, useContext, useState } from 'react';

const SearchContext = createContext();

export const SearchProvider = ({ children }) => {
  const [searchTerm, setSearchTerm] = useState('');

  return (
    <SearchContext.Provider value={{ searchTerm, setSearchTerm }}>
      {children}
    </SearchContext.Provider>
  );
};

export const useSearch = () => useContext(SearchContext);

lib/firebaseConfig.js:
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app)
export {db}

lib/productService.js:
import { db } from "./firebaseConfig";
import {
  collection,
  addDoc,
  getDocs,
  doc,
  updateDoc,
  deleteDoc,
} from "firebase/firestore";

const productsCollection = collection(db, "products");

export const productService = {
  addProduct: async (product) => {
    try {
      const docRef = await addDoc(productsCollection, product);
      return { id: docRef.id, ...product };
    } catch (error) {
      console.error("Error adding product:", error);
      throw error;
    }
  },

  getProducts: async () => {
    try {
      const snapshot = await getDocs(productsCollection);
      return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error("Error getting products:", error);
      throw error;
    }
  },

  updateProduct: async (id, updates) => {
    try {
      await updateDoc(doc(db, "products", id), updates);
    } catch (error) {
      console.error("Error updating product:", error);
      throw error;
    }
  },

  deleteProduct: async (id) => {
    try {
      await deleteDoc(doc(db, "products", id));
    } catch (error) {
      console.error("Error deleting product:", error);
      throw error;
    }
  },
};

Please remember I am new to this I have no knowledge on this so put me through with patience
Go through the everything thoroughly and ensure that everything is working perfectly and also i notice that when not logged in and i tried to visit a page using the page name instead of the unauthorized page to be called upon its showing me 404 This page cannot be found 

Error when i tried to npm run build:
PS C:\Users\user\Desktop\final> npm run build

> final@0.1.0 build
> next build

   ▲ Next.js 15.3.2
   - Environments: .env.local

   Creating an optimized production build ...
Failed to compile.

./node_modules/framer-motion/dist/es/index.mjs
Error: It's currently unsupported to use "export *" in a client boundary. Please use named exports instead.
    at Object.transformSource (C:\Users\user\Desktop\final\node_modules\next\dist\build\webpack\loaders\next-flight-loader\index.js:104:53)

Import trace for requested module:
./node_modules/framer-motion/dist/es/index.mjs
./app/unauthorized/page.js


> Build failed because of webpack errors

Please help me out

I forgot to mention please everything you are providing should be in full, dont give me half code implementations or telling me replace this with this or keep this existing 
Just provide the full implementation even if any improvement is done on an existing code just provide the full hope you understand?